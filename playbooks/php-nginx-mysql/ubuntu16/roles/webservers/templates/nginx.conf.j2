
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  3000;

    #gzip  on;

    server {
        listen      {{ http_port }};
        server_name localhost;
        set         $root_path '/home/doge/projects/t2cloud/v2/magicstack-ui/src';
        root        $root_path;

        location ~ .*\^/(.+) {
            root  $root_path;
        }

        location ~ ^/v1/(.+)$ {
            proxy_pass http://172.16.30.170;   #来自接口请求后台处理
            proxy_redirect off;
            proxy_set_header Host $host;    #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            client_max_body_size 10m;   #允许客户端请求的最大单文件字节数
            client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数
            proxy_connect_timeout 3000;   #nginx跟后端服务器连接超时时间
            proxy_read_timeout 3000;      #连接成功后，后端服务器响应时间
            proxy_buffer_size 4k;       #设置代理服务器（nginx）保存用户头信息的缓冲区大小
            proxy_buffers 6 32k;        #proxy_buffers缓冲区，网页平均在32k以下的话，这样设置
            proxy_busy_buffers_size 64k;#高负荷下缓冲大小（proxy_buffers*2）
            proxy_temp_file_write_size 64k; #设定缓存文件夹大小，大于这个值，将从upstream服务器传
        }

        location ~ .*\.(gif|jpg|png|bmp|swf)$   #由nginx处理静态页面
        {
            expires 30d;   #使用expires缓存模块，缓存到客户端30天
        }
        location ~ .*\.(jsp|js|css)?$
        {
            expires 1d;
        }
        error_page  404         /404.html;   #错误页面
        error_page  500 502 503 504  /50x.html;
        location = /50x.html {
            root html;
        }
    }

    server {
        listen {{ php_port }} default_server;
        listen [::]:{{ php_port }} default_server;

        # SSL configuration
        #
        # listen 443 ssl default_server;
        # listen [::]:443 ssl default_server;
        #
        # Note: You should disable gzip for SSL traffic.
        # See: https://bugs.debian.org/773332
        #
        # Read up on ssl_ciphers to ensure a secure configuration.
        # See: https://bugs.debian.org/765782
        #
        # Self signed certs generated by the ssl-cert package
        # Don't use them in a production server!
        #
        # include snippets/snakeoil.conf;

        root /var/www/html;

        # Add index.php to the list if you are using PHP
        index index.html index.htm index.nginx-debian.html;

        server_name localhost;

        location / {
            # First attempt to serve request as file, then
            # as directory, then fall back to displaying a 404.
            try_files $uri $uri/ =404;
        }

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        location ~ \.php$ {
            include snippets/fastcgi-php.conf;
        #
        #	# With php7.0-cgi alone:
        	fastcgi_pass {{ php_address}};
        #	# With php7.0-fpm:
        #    fastcgi_pass unix:/run/php/php7.0-fpm.sock;
        }

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #	deny all;
        #}
    }

}